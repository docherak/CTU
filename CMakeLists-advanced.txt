cmake_minimum_required(VERSION 3.17)
include("./cmake/utils.cmake")

####################################################################################################
# Global variables
####################################################################################################
set(MY_PROJECT_NAME "LectureNotesExamples" CACHE STRING "Project name")
set(MY_SELECTED_SYSTEM "Windows" CACHE STRING "User defined selected system for the compilation.")

set(MY_DEFAULT_BUILD_TYPE "Debug")
set(IS_CROSS_COMPILATION FALSE CACHE BOOL "Indicates cross compilation")

set(MY_ROOT_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE PATH "Root")
#set(MY_COMMON_DIR ${MY_ROOT_SRC_DIR}/../common CACHE PATH "Commons")
set(MY_SRC_DIR ${MY_ROOT_SRC_DIR}/src CACHE PATH "SRC")

message("MY_ROOT_SRC_DIR =  ${MY_ROOT_SRC_DIR}")

####################################################################################################
# CMake paths and settings
####################################################################################################
set(CMAKE_VERBOSE_MAKEFILE ON)
# execute_process(COMMAND "${CMAKE_COMMAND}" "-E" "environment")

# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${MY_ROOT_SRC_DIR}/lib)
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/debug)
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/release)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${MY_ROOT_SRC_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release)

####################################################################################################
# Project definition
####################################################################################################
project(MY_PROJECT_NAME CXX)
set(CMAKE_SYSTEM_NAME ${MY_SELECTED_SYSTEM})  # Windows/Linux/Darwin/Android/FreeBSD/MSYS
set(CMAKE_SYSTEM_PROCESSOR x86_64)

####################################################################################################
# Compiler definitions
####################################################################################################
#find_package(LLVM REQUIRED CONFIG)
add_definitions(${LLVM_DEFINITIONS})

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${MY_DEFAULT_BUILD_TYPE}' as none was specified.")
  set(CMAKE_BUILD_TYPE ${MY_DEFAULT_BUILD_TYPE} CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# set(CMAKE_BUILD_TYPE ${MY_DEFAULT_BUILD_TYPE} CACHE STRING "" FORCE)
message(STATUS "CMAKE_BUILD_TYPE: '${CMAKE_BUILD_TYPE}'")
message(STATUS "CMAKE_CONFIGURATION_TYPES: '${CMAKE_CONFIGURATION_TYPES}'")

# warning level 4 and all warnings as errors
message(STATUS "CMAKE_CXX_COMPILER_ID: '${CMAKE_CXX_COMPILER_ID}'")
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")          
    # add_compile_options(/W4 /WX)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # add_compile_options(-Wall -Werror -Wno-unknown-pragmas)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_options(-Wall -Wno-unknown-pragmas -pedantic)
    #add_compile_options(-Wall -Werror -Wno-unknown-pragmas)
endif()

#set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*,header-filter=.h )
set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*,header-filter=.h )

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})

####################################################################################################
# Target definition
####################################################################################################
include_directories(BEFORE 
        ${MY_SRC_DIR}
)

file(GLOB MY_HEADER_FILES RELATIVE ${MY_SRC_DIR}
    ${MY_SRC_DIR}/*.h
)

file(GLOB MY_SOURCE_FILES RELATIVE ${MY_SRC_DIR}
    ${MY_SRC_DIR}/*.cpp
)

# link_directories(BEFORE "stdc++fs" )

foreach(srcFile ${MY_SOURCE_FILES} )
    string(REPLACE ".cpp" "" srcName ${srcFile})
    add_executable( ${srcName} ${MY_SRC_DIR}/${srcFile} ${MY_HEADER_FILES})

    target_include_directories(${srcName} PRIVATE
        ${MY_SRC_DIR}
    )

    # target_link_libraries(${srcName} PRIVATE "stdc++fs")
    # target_link_libraries(${srcName} PRIVATE OpenMP::OpenMP_CXX)
    # set_target_properties(${srcName} PROPERTIES PREFIX "")            #clears the lib prefix for library name
    # set_target_properties(${srcName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${MY_ROOT_SRC_DIR}/bin )

endforeach( srcFile ${MY_SOURCE_FILES} )

# add_custom_command(
#     TARGET ${MY_PROJECT_NAME}
#     PRE_BUILD
#     COMMAND ${CMAKE_COMMAND} -E copy ${MY_ROOT_SRC_DIR}/../globalhook/bin/release/hook.dll $<TARGET_FILE_DIR:injector>/hook.dll
#     COMMENT "Copying to output directory"
# )



####################################################################################################
# Print infos
####################################################################################################
# print_target_properties(app)
# print_cache (".*")
# print_cache (CMAKE_CXX_FLAGS)